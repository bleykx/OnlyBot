@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService
@inject IJSRuntime JSRuntime
@inject IScriptRepository _scriptRepository

<div class="container">
    <img src="/images/Icons/Filter.png" class="" style="max-height:2rem;max-width:2rem;margin-right:1rem" />
    <div class="btn-group" role="group" aria-label="Button group with nested dropdown">
        <div class="btn-group" role="group" id="scriptFilter">
            <button type="button" class="btn btn-custom dropdown-toggle" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">
                Script Type
            </button>
            <ul class="dropdown-menu">
                @foreach (var scriptType in Enum.GetValues(typeof(ScriptTypeEnum)))
                {
                    var btnClass = "btn-outline-custom-" + scriptType.ToString().ToLower();
                    <li>
                        <a class="dropdown-item">
                            <input type="checkbox" class="btn-check" id="@scriptType.ToString()" autocomplete="off" @onchange="UpdateFilters">
                            <label class="btn @btnClass" for="@scriptType.ToString()">@scriptType.ToString()</label>
                        </a>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>
<script src="/js/filters.js"></script>

@code {
    [CascadingParameter]
    public List<Script> Scripts { get; set; } = new List<Script>();
    [Parameter]
    public EventCallback<List<Script>> OnFilter { get; set; }
    public Dictionary<string, List<string>> filters = new Dictionary<string, List<string>>();

    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var filterExist = await LocalStorageService.ContainKeyAsync("ScriptsFilters");

            if (filterExist)
            {
                filters = JsonConvert.DeserializeObject<Dictionary<string, List<string>>>(await LocalStorageService.GetItemAsStringAsync("ScriptsFilters"))!;
                if (filters.Count > 0)
                {
                    foreach (var filter in filters)
                    {
                        foreach (var value in filter.Value)
                        {
                            await JSRuntime.InvokeVoidAsync("checkboxInterop.initCheckbox", value, true);
                        }
                    }
                }
            }
        }
        base.OnAfterRender(firstRender);
    }

    public async void RefreshScriptsWithFilters()
    {
        var filtersExist = await LocalStorageService.ContainKeyAsync("ScriptsFilters");
        if (filtersExist)
        {
            filters = JsonConvert.DeserializeObject<Dictionary<string, List<string>>>(await LocalStorageService.GetItemAsStringAsync("ScriptsFilters"))!;
            Scripts = await _scriptRepository.GetFilteredScripts(filters);
            await OnFilter.InvokeAsync(Scripts);
        }
        else
        {
            Scripts = await _scriptRepository.GetAll();
        }
    }

    private async Task UpdateFilters()
    {
        filters = new Dictionary<string, List<string>>();
        var scriptFilters = new List<string>();

        foreach (var script in Enum.GetValues(typeof(ScriptTypeEnum)))
        {
            var isChecked = await JSRuntime.InvokeAsync<bool>("checkboxInterop.checkCheckbox", script.ToString());
            if (isChecked && !filters.Any(m => m.Value.Contains(script.ToString())))
            {
                scriptFilters.Add(script.ToString());
            }
        }

        if (scriptFilters.Count > 0)
            filters.Add("Script", scriptFilters);

        await LocalStorageService.SetItemAsStringAsync("ScriptsFilters", JsonConvert.SerializeObject(filters));

        RefreshScriptsWithFilters();
    }
}