@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService
@inject IJSRuntime JSRuntime
@inject IScriptService _scriptService

<div class="container">
    <div class="btn-group" role="group" aria-label="Button group with nested dropdown">
        <div class="btn-group" role="group" id="scriptFilter">
            <button type="button" class="btn btn-custom dropdown-toggle" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">
                Script Type
            </button>
            <ul class="dropdown-menu">
                @foreach (var scriptType in Enum.GetValues(typeof(ScriptTypeEnum)))
                {
                    var btnClass = "btn-outline-custom-" + scriptType.ToString().ToLower();
                    <li>
                        <a class="dropdown-item">
                            <input type="checkbox" class="btn-check" id="@scriptType.ToString()" autocomplete="off" @onchange="UpdateFiltersType">
                            <label class="btn @btnClass" for="@scriptType.ToString()">@scriptType.ToString()</label>
                        </a>
                    </li>
                }
            </ul>
        </div>
        <img src="/images/Icons/delete.png" class="" style="max-height:2rem;max-width:2rem;margin-left:1rem" @onclick="DeleteFiltersType" />
    </div>
    <div class="mt-4">
        <form class="d-flex">
            <input id="searchInput" class="form-control me-2" type="search" placeholder="Search scripts" @bind="searchQuery" />
            <button class="btn btn-outline-success" type="button" @onclick="SelectScript" disabled="@IsSelectButtonDisabled">Select</button>
        </form>
    </div>
</div>
<script src="/js/filters.js"></script>

@code {
    [CascadingParameter]
    public List<Script> Scripts { get; set; } = new List<Script>();
    [Parameter]
    public EventCallback<List<Script>> OnFilter { get; set; }
    [Parameter]
    public EventCallback<Script> OnSelectScript { get; set; }
    public Dictionary<string, List<string>> filters = new Dictionary<string, List<string>>();
    private string searchQuery;
    private bool IsSelectButtonDisabled => string.IsNullOrEmpty(searchQuery) || !Scripts.Select(s => s.Name).ToList().Any(s => s == searchQuery);

    public static _ScriptMenu Instance { get; private set; }
   

    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var filterExist = await LocalStorageService.ContainKeyAsync("ScriptsFilters");

            if (filterExist)
            {
                filters = JsonConvert.DeserializeObject<Dictionary<string, List<string>>>(await LocalStorageService.GetItemAsStringAsync("ScriptsFilters"))!;
                if (filters.Count > 0)
                {
                    foreach (var filter in filters)
                    {
                        foreach (var value in filter.Value)
                        {
                            await JSRuntime.InvokeVoidAsync("checkboxInterop.initCheckbox", value, true);
                        }
                    }
                }
            }
        }
        await JSRuntime.InvokeVoidAsync("searchInterop.initializeTypeaheadForScripts", "searchInput", Scripts.Select(s => s.Name).ToList());
        base.OnAfterRender(firstRender);
    }

    public async void RefreshScriptsWithFilters()
    {
        var filtersExist = await LocalStorageService.ContainKeyAsync("ScriptsFilters");
        if (filtersExist)
        {
            filters = JsonConvert.DeserializeObject<Dictionary<string, List<string>>>(await LocalStorageService.GetItemAsStringAsync("ScriptsFilters"))!;
            Scripts = await _scriptService.GetFilteredScripts(filters);
            await OnFilter.InvokeAsync(Scripts);
        }
        else
        {
            Scripts = await _scriptService.GetAll();
        }
        await JSRuntime.InvokeVoidAsync("searchInterop.updateTypeaheadList", "searchInput", Scripts.Select(s => s.Name).ToList());
    }

    private async Task UpdateFiltersType()
    {
        filters = new Dictionary<string, List<string>>();
        var scriptFilters = new List<string>();

        foreach (var script in Enum.GetValues(typeof(ScriptTypeEnum)))
        {
            var isChecked = await JSRuntime.InvokeAsync<bool>("checkboxInterop.checkCheckbox", script.ToString());
            if (isChecked && !filters.Any(m => m.Value.Contains(script.ToString())))
            {
                scriptFilters.Add(script.ToString());
            }
        }

        if (scriptFilters.Count > 0)
            filters.Add("Type", scriptFilters);

        await LocalStorageService.SetItemAsStringAsync("ScriptsFilters", JsonConvert.SerializeObject(filters));

        RefreshScriptsWithFilters();
    }

    private async Task DeleteFiltersType()
    {
        filters = new Dictionary<string, List<string>>();
        await LocalStorageService.SetItemAsStringAsync("ScriptsFilters", JsonConvert.SerializeObject(filters));
        @foreach (var scriptType in Enum.GetValues(typeof(ScriptTypeEnum)))
        {
            await JSRuntime.InvokeVoidAsync("checkboxInterop.clearCheckboxes", scriptType.ToString());

        }
        RefreshScriptsWithFilters();
    }

    private async Task SelectScript()
    {
        var script = Scripts.FirstOrDefault(s => s.Name == searchQuery);
        await OnSelectScript.InvokeAsync(script);
    }

    private async Task DeleteFiltersName()
    {
        filters = new Dictionary<string, List<string>>();
        await LocalStorageService.SetItemAsStringAsync("ScriptsFilters", JsonConvert.SerializeObject(filters));
        @foreach (var scriptType in Enum.GetValues(typeof(ScriptTypeEnum)))
        {
            await JSRuntime.InvokeVoidAsync("checkboxInterop.clearCheckboxes", scriptType.ToString());

        }
        RefreshScriptsWithFilters();
    }

    public void UpdateSearchQuery(string query)
    {
        searchQuery = query;
        StateHasChanged();
    }
}