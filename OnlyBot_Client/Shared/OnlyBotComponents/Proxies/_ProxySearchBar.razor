@inject IJSRuntime JSRuntime

<div class="mt-4">
    <form class="d-flex">
        <input id="proxiesSearchInput" class="form-control me-2" type="search" placeholder="Search proxies" @bind="searchQuery" />
        <button class="btn btn-outline-success" type="button" @onclick="SelectProxy" disabled="@IsSelectButtonDisabled">Select</button>
    </form>
</div>

@code {
    [CascadingParameter]
    public List<Proxy> Proxies { get; set; }
    [Parameter]
    public EventCallback<Proxy> OnSelectProxy { get; set; }
    private static _ProxySearchBar _instance;

    private string searchQuery;
    private bool IsSelectButtonDisabled => string.IsNullOrEmpty(searchQuery) || !Proxies.Select(p => p.Name).ToList().Any(p => p == searchQuery);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("searchInterop.initializeTypeaheadForProxies", "proxiesSearchInput", Proxies.Select(p => p.Name).ToList());
        }
    }

    protected override void OnInitialized()
    {
        _instance = this;
    }

    private async Task SelectProxy()
    {
        var proxy = Proxies.FirstOrDefault(p => p.Name == searchQuery);
        await OnSelectProxy.InvokeAsync(proxy);
    }

    [JSInvokable("UpdateProxySearchQuery")]
    public static Task UpdateProxySearchQuery(string query)
    {

        if (_instance != null)
        {
            _instance.searchQuery = query;
            _instance.InvokeAsync(() =>
           {
               _instance.StateHasChanged();
           });
        }
        return Task.CompletedTask;
    }
}