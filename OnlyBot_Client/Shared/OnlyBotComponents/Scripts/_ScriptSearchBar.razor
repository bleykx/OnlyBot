@inject IJSRuntime JSRuntime

<div class="mt-4">
    <form class="d-flex">
        <input id="scriptsSearchInput" class="form-control me-2" type="search" placeholder="Search scripts" @bind="searchQuery" />
        <button class="btn btn-outline-success" type="button" @onclick="SelectScript" disabled="@IsSelectButtonDisabled">Select</button>
    </form>
</div>

@code {
    [CascadingParameter]
    public List<Script> Scripts { get; set; }

    [Parameter]
    public EventCallback<Script> OnSelectScript { get; set; }
    private static _ScriptSearchBar _instance;

    private string searchQuery;
    private bool IsSelectButtonDisabled => string.IsNullOrEmpty(searchQuery) || !Scripts.Select(s => s.Name).ToList().Any(s => s == searchQuery);

    protected override void OnInitialized()
    {
        _instance = this;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("searchInterop.initializeTypeaheadForScripts", "scriptsSearchInput", Scripts.Select(s => s.Name).ToList());
    }


    [JSInvokable("UpdateScriptSearchQuery")]
    public static Task UpdateScriptSearchQuery(string query)
    {
        
        if (_instance != null)
        {
            _instance.searchQuery = query;
            _instance.InvokeAsync( () =>
           {
               _instance.StateHasChanged();
           });
        }
        return Task.CompletedTask;
    }

    private async Task SelectScript()
    {
        var script = Scripts.FirstOrDefault(s => s.Name == searchQuery);
        await OnSelectScript.InvokeAsync(script);
    }
}