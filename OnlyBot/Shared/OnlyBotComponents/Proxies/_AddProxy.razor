@inject IProxyRepository _proxyRepository
@inject IJSRuntime JSRuntime

<button type="button" class="btn btn-custom-success" data-bs-toggle="modal" data-bs-target="#staticBackdrop" @onclick="ResetData">
    Add Proxy
</button>

<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content ">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Add Proxy</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <EditForm Model="Proxy" OnValidSubmit="AddProxy">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="proxyName">Proxy name</label>
                        <InputText class="form-control" id="proxyName" @bind-Value="Proxy.Name" @onfocusout="FormValidation" />
                        <ValidationMessage For="@(() => Proxy.Name)" />
                        <label for="proxyIp">Proxy IP</label>
                        <ValidationMessage For="@(() => Proxy.IP)" />
                        <InputText class="form-control" id="proxyIp" @bind-Value="Proxy.IP" @onfocusout="FormValidation" />
                        <label for="proxyPort">Proxy Port</label>
                        <InputNumber class="form-control" id="proxyPort" @bind-Value="Proxy.Port" @onfocusout="FormValidation" />
                        <ValidationMessage For="@(() => Proxy.Port)" />
                        <label for="proxyUsername">Proxy Username</label>
                        <InputText class="form-control" id="proxyUsername" @bind-Value="Proxy.Username" />
                        <label for="proxyPassword">Proxy Password</label>
                        <InputText class="form-control" id="proxyPassword" @bind-Value="Proxy.Password" />
                        <label for="socketType">Socket Type</label>
                        <InputSelect class="form-control" id="socketType" @bind-Value="Proxy.SocketType" @onfocusout="FormValidation">
                            <option value="" selected disabled hidden>Choose here</option>
                            <option value="Socks5">Socks5</option>
                            <option value="Https">Https</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => Proxy.SocketType)" />
                        <label for="expirationDate">Expiration Date</label>
                        <InputDate class="form-control" id="expirationDate" @bind-Value="Proxy.PlanExpirationDate"></InputDate>
                        <ValidationMessage For="@(() => Proxy.PlanExpirationDate)" />
                        <label for="provider">Provider</label>
                        <InputText class="form-control" id="provider" @bind-Value="Proxy.Provider" />
                    </div>
                    <div class="modal-footer form-group">
                        <button class="btn btn-custom-success" data-bs-dismiss="modal" disabled="@(!FormIsValid)">Add</button>
                        <button type="button" class="btn btn-custom-danger" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    public Proxy Proxy { get; set; } = new Proxy();
    public string? SelectedProxyType { get; set; } = "Socks5";
    public bool FormIsValid { get; set; } = false;

    protected override void OnInitialized()
    {
        Proxy = new Proxy();
        Proxy.PlanExpirationDate = DateTime.Now.AddDays(30);
        base.OnInitialized();
    }

    public void ResetData ()
    {
        Proxy = new Proxy();
        Proxy.PlanExpirationDate = DateTime.Now.AddDays(30);
        FormIsValid = false;
    }

    public void FormValidation()
    {
        FormIsValid = !String.IsNullOrEmpty(Proxy.Name) && !String.IsNullOrEmpty(Proxy.IP) && !String.IsNullOrEmpty(Proxy.SocketType) && Proxy.Port > 0;
    }

    public void ChangeSocketType(ChangeEventArgs e)
    {
        SelectedProxyType = e.Value!.ToString();
    }

    public async Task AddProxy()
    {
        Proxy.Id = Guid.NewGuid();
        Proxy.SocketType = SelectedProxyType;
        await _proxyRepository.Create(Proxy);
    }
}
